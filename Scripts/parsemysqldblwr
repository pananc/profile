#!/usr/bin/python

# This script is used to parse mysql doublewrite records.
# Author: Nicole Nie (2017/11/27)
#
# Usage: ./parsemysqldblwr <data_dir> [, <out_dir>]
#
# Note:
# 1. The data_dir should be the path to the Taurus/MySQL data directory
# 2. The out_dir is current dir if not defined

import os
import struct
import sys

# Predefined constants.
UNIV_PAGE_SIZE = 16384
FSP_TRX_SYS_PAGE_NO = 5 # transaction system header, in tablespace 0

FIL_PAGE_DATA = 38
PAGE_DATA = (FIL_PAGE_DATA + 36 + 2 * 10)
FIL_PAGE_INDEX = 17855
REC_N_NEW_EXTRA_BYTES = 5
REC_N_OLD_EXTRA_BYTES = 6

# The low 4 bytes of this are used to store the page checksum, the last 4 bytes
# should be identical to the last 4 bytes of FIL_PAGE_LSN
FIL_PAGE_END_LSN_OLD_CHKSUM = 8
FIL_PAGE_DATA_END = 8

# The offset of the MySQL binlog offset info in the trx system header
TRX_SYS_MYSQL_LOG_INFO = (UNIV_PAGE_SIZE - 1000)

# The offset of the doublewrite buffer header on the trx system header page
TRX_SYS_DOUBLEWRITE = (UNIV_PAGE_SIZE - 200)

TRX_SYS_MYSQL_LOG_NAME_LEN = 512
TRX_SYS_MYSQL_LOG_MAGIC_N = 873422344
TRX_SYS_DOUBLEWRITE_MAGIC_N = 536853855
TRX_SYS_DOUBLEWRITE_BLOCK_SIZE = 64

TRX_SYS_N_RSEGS = 128

def mach_read_from_1(fp):
    c0, = struct.unpack('B', fp.read(1))
    return (c0)

def mach_read_from_2(fp):
    c0,c1 = struct.unpack('BB', fp.read(2))
    return (c0<<8) + (c1)

def mach_read_from_4(fp):
    c0,c1,c2,c3 = struct.unpack('BBBB', fp.read(4))
    # print ("{0:d} {1:d} {2:d} {3:d}".format(c0, c1, c2, c3)),
    return (c0<<24) + (c1<<16) + (c2<<8) + (c3)

def mach_read_from_8(fp):
    c0,c1,c2,c3,c4,c5,c6,c7 = struct.unpack('BBBBBBBB', fp.read(8))
    return (c0<<56) + (c1<<48) + (c2<<40) + (c3<<32) + (c4<<24) + (c5<<16) + (c6<<8) + (c7)

def hex_print_from_n(bin_fp, report_fp, n):
    cnt = 0
    while cnt < n:
        c, = struct.unpack('B', bin_fp.read(1))
        print >> report_fp, ("{0:02X}".format(c)),
        cnt = cnt + 1
    print >> report_fp

def print_fil_header(bin_fp, report_fp):
    print >> report_fp, "FIL_PAGE_CHKSUM:",
    hex_print_from_n(bin_fp, report_fp, 4)
    print >> report_fp, "FIL_PAGE_OFFSET:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_PREV:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_NEXT:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    print >> report_fp, "FIL_PAGE_LSN:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    fil_page_type = mach_read_from_2(bin_fp)
    print >> report_fp, "FIL_PAGE_TYPE:",
    print >> report_fp, ("{0:d}".format(fil_page_type))
    print >> report_fp, "FIL_PAGE_FILE_FLUSH_LSN:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "FIL_PAGE_SPACE_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
    return fil_page_type

def print_page_content(bin_fp, report_fp, init_offset):
    print >> report_fp, "PAGE_N_DIR_SLOTS:",
    page_n_dir_slots = mach_read_from_2(bin_fp)
    print >> report_fp, ("{0:d}".format(page_n_dir_slots))
    print >> report_fp, "PAGE_HEAP_TOP:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    page_n_heap = mach_read_from_2(bin_fp)
    if (page_n_heap & 0x8000) == 0x8000:
        page_n_heap = page_n_heap & ~0x8000
        is_comp = True
        print >> report_fp, "PAGE_N_HEAP (new-style compact format):",
    else:
        is_comp = False
        print >> report_fp, "PAGE_N_HEAP (old-style redundant format):",
    print >> report_fp, ("{0:d}".format(page_n_heap))
    print >> report_fp, "PAGE_FREE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_GARBAGE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_LAST_INSERT:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_DIRECTION:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_N_DIRECTION:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_N_RECS:",
    page_n_recs = mach_read_from_2(bin_fp)
    print >> report_fp, ("{0:d}".format(page_n_recs))
    print >> report_fp, "PAGE_MAX_TRX_ID:",
    hex_print_from_n(bin_fp, report_fp, 8)
    print >> report_fp, "PAGE_LEVEL:",
    print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
    print >> report_fp, "PAGE_INDEX_ID:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    if is_comp:
        infimum = PAGE_DATA + 5
        supremum = PAGE_DATA + 2*REC_N_NEW_EXTRA_BYTES + 8
        record_extra_bytes = REC_N_NEW_EXTRA_BYTES
        bin_fp.seek(init_offset + infimum - 2)
        record_offset = infimum + mach_read_from_2(bin_fp)
    else:
        infimum = PAGE_DATA + 1  + REC_N_OLD_EXTRA_BYTES
        supremum = PAGE_DATA + 2 + 2*REC_N_OLD_EXTRA_BYTES + 8
        record_extra_bytes = REC_N_OLD_EXTRA_BYTES
        bin_fp.seek(init_offset + infimum - 2)
        record_offset = mach_read_from_2(bin_fp)
    print >> report_fp, "REC OFFSETS:", str(page_n_recs), "EXPECTED"
    idx = 0
    while (record_offset < UNIV_PAGE_SIZE - record_extra_bytes) and (record_offset != supremum):
        print >> report_fp, "\tOFFSET TO REC #" + str(idx) + ":", str(record_offset)
        bin_fp.seek(init_offset + record_offset - 2)
        if is_comp:
            incr_offset = mach_read_from_2(bin_fp)
            if incr_offset == 0:
                print >> report_fp, "\t***FATAL ERROR DURING PARSING***"
                break
            record_offset = record_offset + incr_offset
        else:
            next_offset = mach_read_from_2(bin_fp)
            if (next_offset == 0) or (next_offset == record_offset):
                print >> report_fp, "\t***FATAL ERROR DURING PARSING***"
                break
            record_offset = next_offset
        idx = idx + 1
    return page_n_dir_slots

def print_page_directory(bin_fp, report_fp, page_n_dir_slots):
    cnt = 0
    print >> report_fp, "PAGE_DIRECTORY:", str(page_n_dir_slots), "SLOTS"
    while cnt < page_n_dir_slots:
        print >> report_fp, "\tSLOT[" + str(cnt) + "]:",
        print >> report_fp, ("{0:d}".format(mach_read_from_2(bin_fp)))
        bin_fp.seek(-4, 1)
        cnt = cnt + 1

def print_ibd_page(bin_fp, report_fp):
    offset = bin_fp.tell()
    fil_page_type = print_fil_header(bin_fp, report_fp)
    if fil_page_type == FIL_PAGE_INDEX:
        page_n_dir_slots = print_page_content(bin_fp, report_fp, offset)
        bin_fp.seek(offset + UNIV_PAGE_SIZE - 10)
        print_page_directory(bin_fp, report_fp, page_n_dir_slots)
    bin_fp.seek(offset + UNIV_PAGE_SIZE - 8)
    print_fil_tailer(bin_fp, report_fp)

def print_fil_tailer(bin_fp, report_fp):
    print >> report_fp, "FIL_PAGE_END_LSN_OLD_CHKSUM:",
    hex_print_from_n(bin_fp, report_fp, 8)

def print_trx_system_page(bin_fp, report_fp):
    offset = bin_fp.tell()
    print_fil_header(bin_fp, report_fp)
    print >> report_fp, "TRX_SYS_TRX_ID_STORE:",
    print >> report_fp, ("{0:d}".format(mach_read_from_8(bin_fp)))
    print >> report_fp, "TRX_SYS_FSEG_HEADER:",
    print >> report_fp, ("({0:d}, {1:d}, {2:d})".format(mach_read_from_4(bin_fp), mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    cnt = 0
    while cnt < TRX_SYS_N_RSEGS:
        print >> report_fp, "TRX_SYS_RSEGS[" + str(cnt) + "]:",
        print >> report_fp, ("({0:d}, {1:d})".format(mach_read_from_4(bin_fp), mach_read_from_4(bin_fp)))
        cnt = cnt + 1
    bin_fp.seek(offset+ TRX_SYS_MYSQL_LOG_INFO)
    print >> report_fp, "TRX_SYS_MYSQL_LOG_MAGIC_N_FLD:",
    trx_sys_mysql_log_magic_n = mach_read_from_4(bin_fp)
    print >> report_fp, ("{0:d}".format(trx_sys_mysql_log_magic_n))
    if trx_sys_mysql_log_magic_n == TRX_SYS_MYSQL_LOG_MAGIC_N:
        print >> report_fp, "TRX_SYS_MYSQL_LOG_OFFSET_HIGH:",
        print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
        print >> report_fp, "TRX_SYS_MYSQL_LOG_OFFSET_LOW:",
        print >> report_fp, ("{0:d}".format(mach_read_from_4(bin_fp)))
        print >> report_fp, "TRX_SYS_MYSQL_LOG_NAME:",
        hex_print_from_n(bin_fp, report_fp, TRX_SYS_MYSQL_LOG_NAME_LEN)
    bin_fp.seek(offset + TRX_SYS_DOUBLEWRITE)
    print >> report_fp, "TRX_SYS_DOUBLEWRITE_FSEG (SPACE, PAGE_NO, OFFSET):",
    fseg_space = mach_read_from_4(bin_fp)
    print >> report_fp, ("({0:d}, {1:d}, {2:d})".format(fseg_space, mach_read_from_4(bin_fp), mach_read_from_2(bin_fp)))
    print >> report_fp, "TRX_SYS_DOUBLEWRITE_MAGIC:",
    trx_sys_doublewrite_magic_n = mach_read_from_4(bin_fp)
    print >> report_fp, ("{0:d}".format(trx_sys_doublewrite_magic_n)),
    block1 = 0
    block2 = 0
    if trx_sys_doublewrite_magic_n == TRX_SYS_DOUBLEWRITE_MAGIC_N:
        print >> report_fp, "# The doublewrite buffer has been created"
        print >> report_fp, "TRX_SYS_DOUBLEWRITE_BLOCK1:",
        block1 = mach_read_from_4(bin_fp)
        print >> report_fp, ("{0:d}".format(block1))
        print >> report_fp, "TRX_SYS_DOUBLEWRITE_BLOCK2:",
        block2 = mach_read_from_4(bin_fp)
        print >> report_fp, ("{0:d}".format(block2))
    else:
        print >> report_fp, "# The doublewrite buffer not created"
    bin_fp.seek(offset + UNIV_PAGE_SIZE - 8)
    print_fil_tailer(bin_fp, report_fp)
    if trx_sys_doublewrite_magic_n == TRX_SYS_DOUBLEWRITE_MAGIC_N:
        return (fseg_space, block1, block2)
    else:
        return (0xFFFFFFFF, block1, block2)

# User input variables.
if not len(sys.argv) == 2 and not len(sys.argv) == 3:
    print "Usage: ./parsemysqldblwr <data_dir> [, <out_dir>]"
    sys.exit(1)

data_dir = sys.argv[1]
if os.path.isdir(data_dir):
    data_dir = os.path.abspath(data_dir)
    ibddata1 = os.path.join(data_dir, "idbdata1")
    if not os.path.isfile(ibddata1):
        print "Cound not find " + ibddata1
        sys.exit(1)
else:
    print "Unknown data directory " + data_dir
    sys.exit(1)

if len(sys.argv) == 2:
    out_dir = os.getcwd()
else:
    out_dir = sys.argv[2]
    if os.path.isdir(out_dir):
        out_dir = os.path.abspath(out_dir)
    else:
        print "Unknown output directory " + out_dir
        sys.exit(1)
report_file = os.path.join(out_dir, "dblwr.report")
report_fp = open(report_file, 'w')

# Open the InnoDB TRX SYSTEM PAGE
with open(ibddata1, 'rb') as bin_fp:
    bin_fp.seek(UNIV_PAGE_SIZE*FSP_TRX_SYS_PAGE_NO)
    print >> report_fp, "--- TRX SYSTEM PAGE ---"
    (fseg_space, block1, block2) = print_trx_system_page(bin_fp, report_fp)
    print >> report_fp

    if fseg_space == 0:
        cnt = 0
        block = block1
        while block < block1 + TRX_SYS_DOUBLEWRITE_BLOCK_SIZE:
            print >> report_fp, "--- DOUBLE WRITE BUFFER PAGE #" + str(cnt) + " ---"
            bin_fp.seek(UNIV_PAGE_SIZE*block)
            print_ibd_page(bin_fp, report_fp)
            print >> report_fp
            block = block + 1
            cnt = cnt + 1
        block = block2
        while block < block2 + TRX_SYS_DOUBLEWRITE_BLOCK_SIZE:
            print >> report_fp, "--- DOUBLE WRITE BUFFER PAGE #" + str(cnt) + " ---"
            bin_fp.seek(UNIV_PAGE_SIZE*block)
            print_ibd_page(bin_fp, report_fp)
            print >> report_fp
            block = block + 1
            cnt = cnt + 1

report_fp.close()
print "Report generated, check " + report_file + " for details"
